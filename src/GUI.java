import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Locale;


public class GUI {
    User user;
    Database db;
    JList currentList;
    String currentTable;

    private JPanel BG;
    private JPanel leftJPanel;
    private JPanel rightJPanel;
    private JList<Object> alunosList;
    private JList<Object> profList;
    private JLabel nomeLabel;
    private JLabel cursoLabel;
    private JLabel roleLabel;
    private JLabel cpfLabel;
    private JLabel emailLabel;
    private JLabel idadeLabel;
    private JButton deleteButton;
    private JButton putButton;
    private JPanel rightPanelBtnsPanel;
    private JButton postButton;
    private JTextField nomeTx;
    private JTextField emailTx;
    private JTextField cpfTx;
    private JComboBox<String> cursoCombo;
    private JSpinner idadeSpinner;
    private JRadioButton alunoRadioButton;
    private JButton loadButton;
    private JRadioButton masculinoRadioButton;
    private JRadioButton femininoRadioButton;
    private JRadioButton outroRadioButton;
    private JLabel generoLabel;
    private JRadioButton professorRadioButton;
    private JTabbedPane queryPane;
    private JPanel alunosPanel;
    private JPanel profPanel;
    private JButton clearButton;
    private JPanel leftPanelBtnsPanel;
    private JScrollBar alunosListScroll;
    private JScrollBar profListScroll;
    private JPanel rolePanel;
    private JPanel genderPanel;
    private ButtonGroup genderGroup;
    private ButtonGroup roleGroup;
    private ArrayList<JTextField> txList = new ArrayList<>();

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        BG = new JPanel();
        BG.setLayout(new GridLayoutManager(5, 4, new Insets(0, 0, 0, 0), -1, -1));
        leftJPanel = new JPanel();
        leftJPanel.setLayout(new GridLayoutManager(8, 3, new Insets(0, 0, 0, 0), -1, -1));
        leftJPanel.setToolTipText("Insira seu nome. Entradas de nomes já na lista não serão adicionadas.");
        BG.add(leftJPanel, new GridConstraints(1, 0, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        nomeLabel = new JLabel();
        nomeLabel.setText("Nome");
        nomeLabel.setToolTipText("Insira seu nome.");
        leftJPanel.add(nomeLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        emailLabel = new JLabel();
        emailLabel.setText("Email");
        emailLabel.setToolTipText("Insira seu email.");
        leftJPanel.add(emailLabel, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cpfLabel = new JLabel();
        cpfLabel.setText("CPF");
        cpfLabel.setToolTipText("11 caractéres no máximo, não precisa de pontuação.");
        leftJPanel.add(cpfLabel, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cursoLabel = new JLabel();
        cursoLabel.setBackground(new Color(-12236470));
        cursoLabel.setText("Curso");
        cursoLabel.setToolTipText("Selecione um curso.");
        leftJPanel.add(cursoLabel, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        idadeLabel = new JLabel();
        idadeLabel.setText("Idade");
        idadeLabel.setToolTipText("De 18 a 100 anos.");
        leftJPanel.add(idadeLabel, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        roleLabel = new JLabel();
        roleLabel.setText("Tipo De Usuário");
        roleLabel.setToolTipText("Escolha entre Aluno ou Professor");
        leftJPanel.add(roleLabel, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        leftJPanel.add(spacer1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, new Dimension(88, 11), null, 0, false));
        generoLabel = new JLabel();
        generoLabel.setText("Gênero");
        generoLabel.setToolTipText("Escolha seu gênero.");
        leftJPanel.add(generoLabel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        genderPanel = new JPanel();
        genderPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1, true, false));
        leftJPanel.add(genderPanel, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        masculinoRadioButton = new JRadioButton();
        masculinoRadioButton.setSelected(true);
        masculinoRadioButton.setText("Masculino");
        genderPanel.add(masculinoRadioButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        outroRadioButton = new JRadioButton();
        outroRadioButton.setText("Outro");
        genderPanel.add(outroRadioButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        femininoRadioButton = new JRadioButton();
        femininoRadioButton.setText("Feminino");
        genderPanel.add(femininoRadioButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nomeTx = new JTextField();
        leftJPanel.add(nomeTx, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        idadeSpinner = new JSpinner();
        idadeSpinner.setInheritsPopupMenu(false);
        idadeSpinner.setToolTipText("");
        idadeSpinner.setVisible(true);
        leftJPanel.add(idadeSpinner, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        emailTx = new JTextField();
        leftJPanel.add(emailTx, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        cpfTx = new JTextField();
        leftJPanel.add(cpfTx, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        rolePanel = new JPanel();
        rolePanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        leftJPanel.add(rolePanel, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        alunoRadioButton = new JRadioButton();
        alunoRadioButton.setSelected(true);
        alunoRadioButton.setText("Aluno");
        rolePanel.add(alunoRadioButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        professorRadioButton = new JRadioButton();
        professorRadioButton.setSelected(true);
        professorRadioButton.setText("Professor");
        rolePanel.add(professorRadioButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cursoCombo = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Administração");
        defaultComboBoxModel1.addElement("Análise e Desenvolvimento de Sistemas");
        defaultComboBoxModel1.addElement("Ciência da Computação");
        defaultComboBoxModel1.addElement("Ciências Contábeis");
        defaultComboBoxModel1.addElement("Design");
        defaultComboBoxModel1.addElement("Direito");
        defaultComboBoxModel1.addElement("Engenharia Civil");
        defaultComboBoxModel1.addElement("Engenharia da Computação");
        defaultComboBoxModel1.addElement("Engenharia de Produção");
        defaultComboBoxModel1.addElement("Engenharia Elétrica");
        defaultComboBoxModel1.addElement("Gestão de Recursos Humanos");
        defaultComboBoxModel1.addElement("Jornalismo");
        defaultComboBoxModel1.addElement("Logística");
        defaultComboBoxModel1.addElement("Marketing");
        defaultComboBoxModel1.addElement("Pedagogia");
        defaultComboBoxModel1.addElement("Publicidade e Propaganda");
        defaultComboBoxModel1.addElement("Redes de Computadores");
        cursoCombo.setModel(defaultComboBoxModel1);
        leftJPanel.add(cursoCombo, new GridConstraints(6, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        leftPanelBtnsPanel = new JPanel();
        leftPanelBtnsPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        leftJPanel.add(leftPanelBtnsPanel, new GridConstraints(7, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        clearButton = new JButton();
        clearButton.setBackground(new Color(-15789812));
        Font clearButtonFont = this.$$$getFont$$$("JetBrains Mono", Font.BOLD, 16, clearButton.getFont());
        if (clearButtonFont != null) clearButton.setFont(clearButtonFont);
        clearButton.setForeground(new Color(-3224372));
        clearButton.setText("LIMPAR");
        clearButton.setToolTipText("Limpa o formulário.");
        leftPanelBtnsPanel.add(clearButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        postButton = new JButton();
        postButton.setBackground(new Color(-10640783));
        Font postButtonFont = this.$$$getFont$$$("JetBrains Mono", Font.BOLD, 16, postButton.getFont());
        if (postButtonFont != null) postButton.setFont(postButtonFont);
        postButton.setForeground(new Color(-3224372));
        postButton.setText("CRIAR");
        postButton.setToolTipText("Adiciona entrada ao banco.");
        leftPanelBtnsPanel.add(postButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        rightJPanel = new JPanel();
        rightJPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        BG.add(rightJPanel, new GridConstraints(1, 2, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        queryPane = new JTabbedPane();
        queryPane.setTabLayoutPolicy(0);
        queryPane.setTabPlacement(1);
        rightJPanel.add(queryPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        alunosPanel = new JPanel();
        alunosPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        queryPane.addTab("Alunos", alunosPanel);
        alunosList = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        alunosList.setModel(defaultListModel1);
        alunosList.setSelectionMode(0);
        alunosPanel.add(alunosList, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        alunosListScroll = new JScrollBar();
        alunosPanel.add(alunosListScroll, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        profPanel = new JPanel();
        profPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        queryPane.addTab("Professores", profPanel);
        profList = new JList();
        final DefaultListModel defaultListModel2 = new DefaultListModel();
        profList.setModel(defaultListModel2);
        profList.setSelectionMode(0);
        profPanel.add(profList, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        profListScroll = new JScrollBar();
        profPanel.add(profListScroll, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        rightPanelBtnsPanel = new JPanel();
        rightPanelBtnsPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        rightJPanel.add(rightPanelBtnsPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        loadButton = new JButton();
        loadButton.setBackground(new Color(-16734554));
        loadButton.setEnabled(true);
        Font loadButtonFont = this.$$$getFont$$$("JetBrains Mono", Font.BOLD, 16, loadButton.getFont());
        if (loadButtonFont != null) loadButton.setFont(loadButtonFont);
        loadButton.setForeground(new Color(-3224372));
        loadButton.setText("CARREGAR");
        loadButton.setToolTipText("Carrega entrada selecionada na lista.");
        rightPanelBtnsPanel.add(loadButton);
        deleteButton = new JButton();
        deleteButton.setBackground(new Color(-3652048));
        Font deleteButtonFont = this.$$$getFont$$$("JetBrains Mono", Font.BOLD, 16, deleteButton.getFont());
        if (deleteButtonFont != null) deleteButton.setFont(deleteButtonFont);
        deleteButton.setForeground(new Color(-3224372));
        deleteButton.setHideActionText(false);
        deleteButton.setText("DELETAR");
        deleteButton.setToolTipText("Deleta entra selecionada na lista do banco.");
        rightPanelBtnsPanel.add(deleteButton);
        putButton = new JButton();
        putButton.setBackground(new Color(-14265220));
        Font putButtonFont = this.$$$getFont$$$("JetBrains Mono", Font.BOLD, 16, putButton.getFont());
        if (putButtonFont != null) putButton.setFont(putButtonFont);
        putButton.setForeground(new Color(-3224372));
        putButton.setText("ATUALIZAR");
        putButton.setToolTipText("Atualiza entrada seleciona da lista no banco. Mudar nome ou Tipo De Usuário não terá impacto.");
        rightPanelBtnsPanel.add(putButton);
        final Spacer spacer2 = new Spacer();
        BG.add(spacer2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        BG.add(spacer3, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        BG.add(spacer4, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer5 = new Spacer();
        BG.add(spacer5, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer6 = new Spacer();
        BG.add(spacer6, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        roleGroup = new ButtonGroup();
        roleGroup.add(alunoRadioButton);
        roleGroup.add(professorRadioButton);
        genderGroup = new ButtonGroup();
        genderGroup.add(masculinoRadioButton);
        genderGroup.add(femininoRadioButton);
        genderGroup.add(outroRadioButton);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return BG;
    }

    public void setButtonsActions() {
        alunoRadioButton.setActionCommand("Alunos");
        professorRadioButton.setActionCommand("Professores");

        masculinoRadioButton.setActionCommand("Masculino");
        femininoRadioButton.setActionCommand("Feminino");
        outroRadioButton.setActionCommand("Outro");
    }

    public void updateLists(Database db) {
        DefaultListModel<Object> alunoListModel = new DefaultListModel<>();
        DefaultListModel<Object> profListModel = new DefaultListModel<>();

        ArrayList<String> profsGot = new ArrayList<>();
        ArrayList<String> alunosGot = new ArrayList<>();

        try {
            profsGot.addAll(db.entries("Professores"));
            alunosGot.addAll(db.entries("Alunos"));
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            alunoListModel.addAll(alunosGot);
            profListModel.addAll(profsGot);
            alunosList.setModel(alunoListModel);
            profList.setModel(profListModel);
        }
    }

    public void tabCheck() {
        int index = queryPane.getSelectedIndex();
        System.out.println("Current index: " + index);
        if (index == 0) {
            profList.clearSelection();
            currentTable = "Alunos";
            currentList = alunosList;
        } else {
            alunosList.clearSelection();
            currentTable = "Professores";
            currentList = profList;
        }
    }

    public void setUser() {
        int idade = (int) idadeSpinner.getValue();
        if (idade > 100) {
            idade = 100;
        } else if (idade < 17) {
            idade = 18;
        }
        user = new User(nomeTx.getText(), genderGroup.getSelection().getActionCommand(), idade, emailTx.getText(), String.valueOf(cursoCombo.getSelectedItem()), cpfTx.getText(), roleGroup.getSelection().getActionCommand());
    }

    public void clearForm() {
        for (JTextField tx : txList) {
            tx.setText("");
        }
        idadeSpinner.setValue(0);
        genderGroup.clearSelection();
        masculinoRadioButton.setSelected(true);
        cursoCombo.setSelectedIndex(0);
        roleGroup.clearSelection();
        alunoRadioButton.setSelected(true);
    }

    public void setUp() {
        txList.add(cpfTx);
        txList.add(nomeTx);
        txList.add(emailTx);

    }

    public GUI(JFrame frame) {
        $$$setupUI$$$();
        db = new Database();
        setButtonsActions();
        tabCheck();
        setUp();
        updateLists(db);


        postButton.addActionListener(e -> {
            setUser();
            try {
                setUser();
                db.post(user);
                updateLists(db);
                clearForm();
            } catch (SQLException exception) {
                exception.printStackTrace();
            }
        });
        loadButton.addActionListener(e -> {
            try {
                String table = currentTable;
                String name = currentList.getSelectedValue().toString();
                user = db.get(table, name);
                nomeTx.setText(user.getName());
                genderGroup.clearSelection();
                switch (user.getGender()) {
                    case "Masculino" -> masculinoRadioButton.setSelected(true);
                    case "Feminino" -> femininoRadioButton.setSelected(true);
                    case "Outro" -> outroRadioButton.setSelected(true);
                }
                idadeSpinner.setValue(user.getAge());
                emailTx.setText(user.getEmail());
                cpfTx.setText(user.getCpf());
                cursoCombo.setSelectedItem(user.getCourse());
                roleGroup.clearSelection();
                if (user.getTable().equals("Alunos")) {
                    alunoRadioButton.setSelected(true);
                } else {
                    professorRadioButton.setSelected(true);
                }
            } catch (SQLException exception) {
                exception.printStackTrace();
            }
        });
        queryPane.addChangeListener(e -> {
            tabCheck();
            clearForm();
        });
        putButton.addActionListener(e -> {
            try {
                String target = currentList.getSelectedValue().toString();
                setUser();
                user.setName(target);
                db.put(user, target);
                clearForm();
            } catch (SQLException exception) {
                exception.printStackTrace();
            }
        });
        deleteButton.addActionListener(e -> {
            try {
                String table = currentTable;
                String name = currentList.getSelectedValue().toString();
                db.delete(table, name);
                updateLists(db);
            } catch (SQLException exception) {
                exception.printStackTrace();
            }
        });
        clearButton.addActionListener(e -> clearForm());

    }

    public static void main(String[] args) {
        Dimension screenRes = Toolkit.getDefaultToolkit().getScreenSize();
        JFrame frame = new JFrame("DBD - AV1");
        frame.setContentPane(new GUI(frame).BG);

        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setPreferredSize(new Dimension(1920 / 2, 1080 / 2));
        frame.setMinimumSize(new Dimension((int) screenRes.getWidth() / 2, (int) screenRes.getHeight() / 2));
        frame.setResizable(false);
        frame.pack();
        frame.setVisible(true);

    }
}
